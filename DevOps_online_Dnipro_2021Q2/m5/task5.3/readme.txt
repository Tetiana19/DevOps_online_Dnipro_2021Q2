1.How many states could has a process in Linux?
состояния выполнения - процесс либо уже работает, либо готов к работе и ждет, когда ему будет дано процессорное время;
состояния ожидания - процессы ожидают какого-либо события или освобождения системного ресурса. 
Ядро делит такие процессы на два типа - те, которые ожидают освобождения аппаратных средств и приостановление с помощью сигнала;
состояния готовности (остановленые) - обычно, в этом состоянии находятся процессы, которые были остановлены с помощью сигнала;
зомби -  - это мертвые процессы, они были остановлены и больше не выполняются, но для них есть запись в таблице процессов, 
возможно, из-за того, что у процесса остались дочерние процессы.

3.proc - файловая система,хранящая в себе данные о запущенных в данный момент процессах. 
Большинство программ получают информацию из файлов в /proc, форматируют их своим способом, а затем отображают.
Так делают все программы, которые отображают информацию о процессах.

6.Процессы ядра linux запускаются самим ядром, при этом родительским процессом якобы их породившим, назначается процесс kthread, с PID=2. 
Таким образом процессами ядра надо считать сам процесс с PID=2, а так же процессы у которых PPID (т.е. pid родителя) равен 2.

7.Колонка STAT может содержать следующие значения:
R - процесс выполняется или готов к выполнению (состояние готовности)
D - процесс в "беспробудном сне" - ожидает дискового ввода/вывода
T - процесс остановлен (stopped) или трассируется отладчиком
S - процесс в состоянии ожидания (sleeping)
Z - процесс-зобми
< - процесс с отрицательным значением nice
N - процесс с положительным значением nice (о команде nice мы поговорим позже)

9. Для анализа запущеных процессов используется утилита ps, утилита top, утилита htop и утилита atop.
Значение основных колонок в выводе утилита ps:
UID - имя пользователя, от имени которого работает процесс;
PID - идентификатор пользователя;
PPID - идентификатор родительского процесса пользователя;
C - расходование ресурсов процессора, в процентах;
SZ - размер процесса;
RSS - реальный размер процесса в памяти;
PSR - ядро процессора, на котором выполняется процесс;
STIME - время, когда процесс был запущен;
TTY - если процесс привязан к терминалу, то здесь будет выведен его номер;
TIME - общее время выполнения процесса (user + system);
CMD - команда, которой был запущен процесс, если программа не может прочитать аргументы процесса, он будет выведен в квадратных скобках;

10.Колонки, которые выводит утилита top:
PID - идентификатор процесса;
USER - имя пользователя, от имени которого выполняется процесс;
PR - приоритет планировщика, установленный для процесса;
NI - рекомендуемый приоритет процесса. Это значение можно менять, может не совпадать с реальным приоритетом планировщика;
VIRT - всё, что находится в памяти, используется или зарезервировано для использования;
RES - всё, что находится в оперативной памяти и относится к процессу. Расшифровывается как Resident Memory Size, указывается в килобайтах;
SHR - часть памяти из RES, которую занимают ресурсы, доступные для использования другим процессам. Расшифровывается - Shared Memory Size.
S - состояние процесса: D - ожидает завершения операции, R - запущен, S - спит, T - остановлен, t - остановлен отладчиком, Z - зомби;
%CPU - процент использования ресурсов процессора;
%MEM - процент использования ресурсов оперативной памяти на основе колонки RES;
TIME - обще процессорное время, которое процесс использовал с момента запуска;
COMAND - команда, с помощью которой был запущен процесс.

12.Интерактивные команды, которые можно использовать в top: 
[1] Отобразить всю статистику по всем ядрам.
[c] Абсолютный путь расположения модуля команды и её аргументы.
[h] Вывести справку о программе.
[k] Уничтожить процесс. Программа запрашивает у вас код процесса и сигнал, который будет ему послан.
[M] Сортировать по объёму используемой памяти.
[n] Изменить число отображаемых процессов. Вам предлагается ввести число.
[P] Сортировать по загрузке процессора.
[r] Изменить приоритет процесса.
[u] Сортировать по имени пользователя.
[Z] Выбрать цвет подсветки.
[z] Подсветить работающие процессы.
[Пробел] Немедленно обновить содержимое экрана.

14.Приоритет процесса определяет, как часто именно этот процесс, по сравнению с другими запущенными процессами, стоящими в очереди на выполнение, 
будет исполняться процессором. В Linux значение приоритета процесса варьируется в диапазоне значений от -20 до 19 
(т.е. получается 40 возможных значений: -20, -19, -18 ... 0, 1, 2 ... 19) и называется niceness (сокращенно NI).
Чем меньше это значение, тем выше приоритет будет у такого процесса.
Посмотреть приоритет процесса можно с помощью команды top.
Для того, чтобы задать приоритет при старте нового процесса, необходимо воспользоваться командой nice
nice -n [значение приоритета] [команда]
Для того, чтобы изменить приоритет у существующего процесса (т.е. такого процесса, который ранее был уже запущен), необходимо воспользоваться командой renice
renice [значение приоритета] -p [id процесса]

15.Информации о том, что с помощью команды top можно менть приоритет процессов я не нашла.

16.Когда вы выполняете команду "kill", то фактически вы посылаете системе сигнал, чтобы заставить ее завершить некорректно ведущее себя приложение.
Вы можете просмотреть все сигналы с помощью команды kill -l
Синтаксис использования "kill":
kill [сигнал или опция] PID
Сигнал по умолчанию (если он не задан) - SIGTERM. Если он не помогает, для принудительного завершения процесса можно использовать следующие варианты:
kill SIGKILL PID
kill -9 PID
где флаг "-9" ссылается на сигнал SIGKILL.
Также обратите внимание, что можно завершать несколько процессов одной командой.
kill -9 PID1 PID2 PID3

17. jobs, fg, bg, nohup используются для работы с фоновыми процессами.